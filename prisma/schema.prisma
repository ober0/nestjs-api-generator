generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id         String   @id @default(uuid())
  firstName  String   @map("first_name")
  lastName   String   @map("last_name")
  phone      String?
  User       User?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  frontendId Int      @default(autoincrement()) @map("frontend_id")
}

model Password {
  id       String @id @default(uuid()) @map("id")
  password String @map("password")
  User     User[]

  @@map("passwords")
}

model User {
  id String @id @default(uuid())

  person   Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId String @unique @map("person_id")

  password   Password @relation(fields: [passwordId], references: [id], onDelete: Cascade)
  passwordId String   @map("password_id")

  email String @unique

  twoFactor   Boolean @default(false)
  isForbidden Boolean @default(false) @map("is_forbidden")
  isActive    Boolean @default(true) @map("is_active")

  roleId String? @map("role_id")
  role   Role?   @relation(fields: [roleId], references: [id], onDelete: SetNull, onUpdate: SetNull)

  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at")
  LoginHistory LoginHistory[]
}

model Permission {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at")
  rolePermissions RolePermission[]
}

model Role {
  id              String           @id @default(uuid())
  name            String           @unique
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at")
  rolePermissions RolePermission[]
  user            User[]
}

model RolePermission {
  roleId       String     @map("role_id")
  permissionId String     @map("permission_id")
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @updatedAt @map("updated_at")

  @@id([roleId, permissionId])
}

model LoginHistory {
  id          String   @id @default(uuid()) @map("id")
  userAgent   String   @map("user_agent")
  ip          String   @map("ip")
  fingerprint String?
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  frontendId  Int      @default(autoincrement()) @map("frontend_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_histories")
}
